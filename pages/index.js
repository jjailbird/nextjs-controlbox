import * as React from 'react'
import { useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {
  AppBar, Typography, Container, Grid, Button, Switch, Divider,
  Box, Step, Stepper, StepLabel, StepContent, Paper, Modal
} from "@mui/material"
import LinearProgress, { LinearProgressProps } from '@mui/material/LinearProgress'

import { io } from "socket.io-client"
import axios from 'axios'

import LinearProgressWithLabel from '../components/LinearProgressWithLabel'

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 800,
  bgcolor: 'background.paper',
  border: '2px solid #000',
  boxShadow: 24,
  p: 4,
};

export default function Home() {
  let socket = null;
  useEffect(() => {
    console.log('useEffect', process.env.serverPort)
    socket = io(`ws://${process.env.serverHost}:${process.env.serverPort}`)
    socket.on("bacend_response", (arg) => {
      console.log('backend_resonse', arg)
    })

  })

  const [open, setDownloadProgressModal] = React.useState(false);
  const handleOpen = () => setDownloadProgressModal(true);
  const handleDownloadProgressModalClose = () => setDownloadProgressModal(false);
  const [progress, setProgress] = React.useState(0);

  let intvalDownCb = null
  let intvalIndex = 0

  function downloadWithProgressTest() {
    // test code for progressbar -----------
    intvalIndex = 0
    intvalDownCb = setInterval(() => {
      ++intvalIndex
      if(intvalIndex<100) setProgress(intvalIndex)
      if (intvalIndex > 130) {
        clearInterval(intvalDownCb)
        intvalIndex = 0
        setDownloadProgressModal(false)
      }
    }, 60)
    // -------------------------------------
  }

  async function downloadWithProgress() {
    await axios({
      url: 'http://ipv4.download.thinkbroadband.com/512MB.zip',
      method: "GET",
      responseType: "blob", // important
      withCredentials: true,
      onDownloadProgress: (progressEvent) => {
        let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total); // you can use this to show user percentage of file downloaded
        setProgress(percentCompleted)
        if (percentCompleted >= 100) {
          setDownloadProgressModal(false)
        } 
      }
    })
  }

  async function handleClick(command) {

    if (command == 'ces_service1.sh') {
      setProgress(0);
      setDownloadProgressModal(true)
      downloadWithProgressTest()
      // downloadWithProgress()
    }
    socket.emit('backend_script', command)
  }

  const title = `Control Box ${process.env.serverPort}`
  return (
    
    <div className={styles['container-vertical']}>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        {/* <meta http-equiv="Content-Security-Policy" content="default-src 'self' http://localhost:18080/"></meta> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Typography
          variant="h1"
          noWrap
          component="a"
          href="/"
          sx={{
            mr: 2,
            display: { xs: 'none', md: 'flex' },
            // fontFamily: 'monospace',
            fontWeight: 700,
            letterSpacing: '.3rem',
            color: "#27465c",
            textDecoration: 'none',
          }}
        >
          CONTROL BOX
        </Typography>
        <Divider variant="fullWidth" />
        <div className={styles.container}>
          <Grid container spacing={2}>
            <Grid item xs={12} md>

              <Button variant="linear-pink" onClick={() => { handleClick('ces_service1.sh') }}>

                <Box sx={{ maxWidth: '400' }}>
                  <div>
                    Vehicle Aggregation Service
                  </div>
                  <Divider style={{ background: 'white', margin: '7px 0px' }} />
                  <Stepper activeStep={-1} orientation="vertical">
                    <Step key="1">
                      <StepLabel>Select master blaster campaign settings</StepLabel>
                    </Step>
                    <Step key="2">
                      <StepLabel>Select master blaster campaign settings</StepLabel>
                    </Step>
                    <Step key="3">
                      <StepLabel>Select master blaster campaign settings</StepLabel>
                    </Step>
                  </Stepper>
                </Box>

              </Button>
            </Grid>
            <Grid item xs={12} md>
              <Button variant="linear-blue" onClick={() => { handleClick('ces_service2.sh') }}>Update Service</Button>
            </Grid>
            <Grid item xs={12} md>
              <Button variant="linear-pink" onClick={() => { handleClick('ces_enable_sdn.sh') }}>SDN Enable</Button>
            </Grid>
            <Grid item xs={12} md>
              <Button variant="linear-blue" onClick={() => { handleClick('ces_disable_sdn.sh') }}>SDN Disable</Button>
            </Grid>
            <Grid item xs={12} md>
              <Button variant="linear-pink" onClick={() => { handleClick('ces_reset.sh') }}>Reset</Button>
            </Grid>
          </Grid>
        </div>
        <Modal
          open={open}
          onClose={handleDownloadProgressModalClose}
          aria-labelledby="modal-modal-title"
          aria-describedby="modal-modal-description"
        >
          <Box sx={style}>
            <Typography id="modal-modal-title" variant="h6" component="h2">
              Downloading
            </Typography>
            <Typography id="modal-modal-description" sx={{ mt: 2 }}>
              Duis mollis, est non commodo luctus, nisi erat porttitor ligula.
            </Typography>
            <Box sx={{ width: '100%' }}>
              <LinearProgressWithLabel value={progress} />
            </Box>
          </Box>
        </Modal>
        {/* <Container className={styles['container-vertical']}>
          <div>
            <span>With default Theme:</span>
          </div>
          <Switch {...label} defaultChecked />
          <Switch {...label} />
          <Switch {...label} disabled defaultChecked />
        </Container> */}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            Arenne
          </span>
        </a>
      </footer>
    </div>
  )
}
